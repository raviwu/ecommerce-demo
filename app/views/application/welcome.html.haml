%h2 Schema Design:
= image_tag("ecommerce_schema.png", class: "img-fluid", alt: "Schema Graph", style: "max-width: 100%; height: auto;")
%h2 Accompished Task Description:
%ul
  %li TODOs:
    %ul
      %li
        User Management:
        Devise
        +
        =link_to "TL;DR", "https://github.com/lynndylanhurley/devise_token_auth"
      %li
        Authentication:
        =link_to "Pundit", "https://github.com/elabs/pundit"
        OR
        =link_to "cancancan", "https://github.com/CanCanCommunity/cancancan"
      %li
        Payment Integration:
        =link_to "Active Merchant", "https://github.com/activemerchant/active_merchant"
      %li
        Search with ElasticSearch
      %li
        Single Order can has many payment record, failed or waiting, but the success payment should only be one.
      %li
        Promotion Rule Custom Validation.
  %li
    User Related Features:
    %ul
      %li
        Use simple bcrypt Password login.
        %ul
          %li admin@ecommerce.demo / password
          %li customer@ecommerce.demo / password
      %li User might have several shipping address, use Contact to store the "contact addresses".
      %li Use Role for authentication management.
      %li Admin Panel requires Admin Role.
  %li
    Product Related Features:
    %ul
      %li Use Category for basic categorization.
      %li Base Production Description is illustrated in Product, and the detailed SPEC are listed by Variant.
      %li Variant has paperclip attachment to add multi-media description.
      %li Variant attributes requires to match it's Product valid attributes, use Custom Validation in Variant Model.
      %li
        Design purpose of stock_item_count column in Variant:
        Variant has a callback
        %code before_save :update_stock_item_count
        to let InventoryManager call
        %mark variant.save
        and cache that Variant inventory status, letting FrontEnd View to read this cache instead of calculating the InventoryUnit count, aim to reduce the query loading on DB.
  %li
    Order Related Features:
    %ul
      %li Shopping Cart is the Order with stating "Shopping"
      %li LineItem will copy data from Variant and record the "price" at that moment.
      %li
        LineItem can setup the inventory reservation, if
        %code lock_inventory
        is
        %code true
        , then Custom Validation will make sure only valid inventory will be added to LineItem.
      %li LintItem update or destroy will release the unused InventoryUnit, use InventoryManager to proceed the cross model operation.
      %li Multi Order records can be merged in single Shipment.
      %li Single Order can has many payment record, failed or waiting, but the success payment should only be one.
      %li Separate Payment / Order / Invoice to handle the accounting easily.
  %li
    Inventory Related Features:
    %ul
      %li Use buffer_unit in Settings to preserve the global mininum reserved quantity.
      %li Use InventoryManager to handle cross model operations.
      %li In InventoryManager, use Inventory table transaction to ensure the data consistency.
  %li
    Discount Related Features:
    %ul
      %li Use Scope to specify the descount rule on "assigned SPEC Variant", "assigned SPEC Product", or "Order".
      %li
        Discount result use many-to-many relations to associate LineItem and Order object, the discount price being recorded in LineItemsPromotion and OrdersPromotion records.
      %li
        Promotion role is defined within Promotion model with JSON format.
      %li
        After Order is finished, can call
        %code calculate_promo_total
        to calculate all the valid promotions the applies to the order, current rule is if "Order" scope promotion has highest prority, and same product will be count discount only once. (only those product has not being applied any promotions will being queried for promotions search)
      %li
        All OrdersPromotion / LineItemsPromotion records are created when
        %code order.calculate_promo_total
        And the final order
        %code promo_total
        is calculated based on the order's OrdersPromotion / LineItemsPromotion
  %li
    View DEMOï¼š
    %ul
      %li Login / Logout
      %li Orders index / show
